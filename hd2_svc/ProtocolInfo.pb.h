// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtocolInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtocolInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtocolInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtocolInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtocolInfo_2eproto;
class Hd2Request;
struct Hd2RequestDefaultTypeInternal;
extern Hd2RequestDefaultTypeInternal _Hd2Request_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Hd2Request* Arena::CreateMaybeMessage<::Hd2Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RequestType : int {
  RT_NONE = 0,
  RT_BUTTON = 1,
  RT_STRATAGEM = 2,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = RT_NONE;
constexpr RequestType RequestType_MAX = RT_STRATAGEM;
constexpr int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestType_descriptor();
template<typename T>
inline const std::string& RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestType_descriptor(), enum_t_value);
}
inline bool RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ButtonId : int {
  BTN_NONE = 0,
  BTN_LEFT = 37,
  BTN_UP = 38,
  BTN_RIGHT = 39,
  BTN_DOWN = 40,
  BTN_SELECT = 41,
  BTN_PRINT = 42,
  BTN_EXECUTE = 43,
  BTN_SNAPSHOT = 44,
  BTN_INSERT = 45,
  BTN_DELETE = 46,
  BTN_HELP = 47,
  BTN_KEY_0 = 48,
  BTN_KEY_1 = 49,
  BTN_KEY_2 = 50,
  BTN_KEY_3 = 51,
  BTN_KEY_4 = 52,
  BTN_KEY_5 = 53,
  BTN_KEY_6 = 54,
  BTN_KEY_7 = 55,
  BTN_KEY_8 = 56,
  BTN_KEY_9 = 57,
  BTN_KEY_A = 65,
  BTN_KEY_B = 66,
  BTN_KEY_C = 67,
  BTN_KEY_D = 68,
  BTN_KEY_E = 69,
  BTN_KEY_F = 70,
  BTN_KEY_G = 71,
  BTN_KEY_H = 72,
  BTN_KEY_I = 73,
  BTN_KEY_J = 74,
  BTN_KEY_K = 75,
  BTN_KEY_L = 76,
  BTN_KEY_M = 77,
  BTN_KEY_N = 78,
  BTN_KEY_O = 79,
  BTN_KEY_P = 80,
  BTN_KEY_Q = 81,
  BTN_KEY_R = 82,
  BTN_KEY_S = 83,
  BTN_KEY_T = 84,
  BTN_KEY_U = 85,
  BTN_KEY_V = 86,
  BTN_KEY_W = 87,
  BTN_KEY_X = 88,
  BTN_KEY_Y = 89,
  BTN_KEY_Z = 90,
  ButtonId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ButtonId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ButtonId_IsValid(int value);
constexpr ButtonId ButtonId_MIN = BTN_NONE;
constexpr ButtonId ButtonId_MAX = BTN_KEY_Z;
constexpr int ButtonId_ARRAYSIZE = ButtonId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ButtonId_descriptor();
template<typename T>
inline const std::string& ButtonId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ButtonId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ButtonId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ButtonId_descriptor(), enum_t_value);
}
inline bool ButtonId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ButtonId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ButtonId>(
    ButtonId_descriptor(), name, value);
}
enum StratagemId : int {
  SG_NONE = 0,
  SG_TEST_AABC = 1,
  SG_TEST_ABLEFTCD = 2,
  SG_TEST_ABCLEFTD = 3,
  StratagemId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StratagemId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StratagemId_IsValid(int value);
constexpr StratagemId StratagemId_MIN = SG_NONE;
constexpr StratagemId StratagemId_MAX = SG_TEST_ABCLEFTD;
constexpr int StratagemId_ARRAYSIZE = StratagemId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StratagemId_descriptor();
template<typename T>
inline const std::string& StratagemId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StratagemId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StratagemId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StratagemId_descriptor(), enum_t_value);
}
inline bool StratagemId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StratagemId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StratagemId>(
    StratagemId_descriptor(), name, value);
}
// ===================================================================

class Hd2Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hd2Request) */ {
 public:
  inline Hd2Request() : Hd2Request(nullptr) {}
  ~Hd2Request() override;
  explicit PROTOBUF_CONSTEXPR Hd2Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hd2Request(const Hd2Request& from);
  Hd2Request(Hd2Request&& from) noexcept
    : Hd2Request() {
    *this = ::std::move(from);
  }

  inline Hd2Request& operator=(const Hd2Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hd2Request& operator=(Hd2Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hd2Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hd2Request* internal_default_instance() {
    return reinterpret_cast<const Hd2Request*>(
               &_Hd2Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Hd2Request& a, Hd2Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Hd2Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hd2Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hd2Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hd2Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hd2Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Hd2Request& from) {
    Hd2Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hd2Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hd2Request";
  }
  protected:
  explicit Hd2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kButtonFieldNumber = 3,
    kStratagemFieldNumber = 4,
  };
  // int32 version = 1;
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // .RequestType type = 2;
  void clear_type();
  ::RequestType type() const;
  void set_type(::RequestType value);
  private:
  ::RequestType _internal_type() const;
  void _internal_set_type(::RequestType value);
  public:

  // .ButtonId button = 3;
  void clear_button();
  ::ButtonId button() const;
  void set_button(::ButtonId value);
  private:
  ::ButtonId _internal_button() const;
  void _internal_set_button(::ButtonId value);
  public:

  // .StratagemId stratagem = 4;
  void clear_stratagem();
  ::StratagemId stratagem() const;
  void set_stratagem(::StratagemId value);
  private:
  ::StratagemId _internal_stratagem() const;
  void _internal_set_stratagem(::StratagemId value);
  public:

  // @@protoc_insertion_point(class_scope:Hd2Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t version_;
    int type_;
    int button_;
    int stratagem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtocolInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hd2Request

// int32 version = 1;
inline void Hd2Request::clear_version() {
  _impl_.version_ = 0;
}
inline int32_t Hd2Request::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Hd2Request::version() const {
  // @@protoc_insertion_point(field_get:Hd2Request.version)
  return _internal_version();
}
inline void Hd2Request::_internal_set_version(int32_t value) {
  
  _impl_.version_ = value;
}
inline void Hd2Request::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:Hd2Request.version)
}

// .RequestType type = 2;
inline void Hd2Request::clear_type() {
  _impl_.type_ = 0;
}
inline ::RequestType Hd2Request::_internal_type() const {
  return static_cast< ::RequestType >(_impl_.type_);
}
inline ::RequestType Hd2Request::type() const {
  // @@protoc_insertion_point(field_get:Hd2Request.type)
  return _internal_type();
}
inline void Hd2Request::_internal_set_type(::RequestType value) {
  
  _impl_.type_ = value;
}
inline void Hd2Request::set_type(::RequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Hd2Request.type)
}

// .ButtonId button = 3;
inline void Hd2Request::clear_button() {
  _impl_.button_ = 0;
}
inline ::ButtonId Hd2Request::_internal_button() const {
  return static_cast< ::ButtonId >(_impl_.button_);
}
inline ::ButtonId Hd2Request::button() const {
  // @@protoc_insertion_point(field_get:Hd2Request.button)
  return _internal_button();
}
inline void Hd2Request::_internal_set_button(::ButtonId value) {
  
  _impl_.button_ = value;
}
inline void Hd2Request::set_button(::ButtonId value) {
  _internal_set_button(value);
  // @@protoc_insertion_point(field_set:Hd2Request.button)
}

// .StratagemId stratagem = 4;
inline void Hd2Request::clear_stratagem() {
  _impl_.stratagem_ = 0;
}
inline ::StratagemId Hd2Request::_internal_stratagem() const {
  return static_cast< ::StratagemId >(_impl_.stratagem_);
}
inline ::StratagemId Hd2Request::stratagem() const {
  // @@protoc_insertion_point(field_get:Hd2Request.stratagem)
  return _internal_stratagem();
}
inline void Hd2Request::_internal_set_stratagem(::StratagemId value) {
  
  _impl_.stratagem_ = value;
}
inline void Hd2Request::set_stratagem(::StratagemId value) {
  _internal_set_stratagem(value);
  // @@protoc_insertion_point(field_set:Hd2Request.stratagem)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RequestType>() {
  return ::RequestType_descriptor();
}
template <> struct is_proto_enum< ::ButtonId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ButtonId>() {
  return ::ButtonId_descriptor();
}
template <> struct is_proto_enum< ::StratagemId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StratagemId>() {
  return ::StratagemId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtocolInfo_2eproto
